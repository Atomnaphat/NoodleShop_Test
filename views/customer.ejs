<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Order Noodles</h3>
            </div>
            <div class="card-body">
                <form id="orderForm">
                    <div class="mb-3">
                        <label for="noodleType" class="form-label">Select Noodle Type</label>
                        <select class="form-select" id="noodleType" required>
                            <option value="">Choose a noodle type...</option>
                            <option value="Pad Thai">Pad Thai</option>
                            <option value="Ramen">Ramen</option>
                            <option value="Udon">Udon</option>
                            <option value="Soba">Soba</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Place Order</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Your Orders</h3>
            </div>
            <div class="card-body">
                <div id="orderList" class="list-group">
                    <!-- Orders will be displayed here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
const socket = io();
let orders = [];

function updateOrderList() {
    const orderList = document.getElementById('orderList');
    orderList.innerHTML = orders.map(order => `
        <div class="list-group-item">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="mb-1">${order.noodleType}</h5>
                    <small>Status: ${order.status}</small>
                </div>
                <span class="badge bg-${getStatusColor(order.status)}">${order.status}</span>
            </div>
        </div>
    `).join('');
}

function getStatusColor(status) {
    switch(status) {
        case 'pending': return 'warning';
        case 'cooking': return 'info';
        case 'ready': return 'success';
        case 'paid': return 'secondary';
        default: return 'primary';
    }
}

document.getElementById('orderForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const noodleType = document.getElementById('noodleType').value;
    
    try {
        const response = await fetch('/api/orders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ noodleType })
        });
        
        const order = await response.json();
        orders.push(order);
        updateOrderList();
        socket.emit('newOrder', order);
        document.getElementById('orderForm').reset();
    } catch (error) {
        console.error('Error placing order:', error);
    }
});

// Socket event listeners
socket.on('orderReceived', (order) => {
    const index = orders.findIndex(o => o._id === order._id);
    if (index !== -1) {
        orders[index] = order;
        updateOrderList();
    }
});

socket.on('orderRemoved', (order) => {
    orders = orders.filter(o => o._id !== order._id);
    updateOrderList();
});

// Initial load of orders
fetch('/api/orders')
    .then(response => response.json())
    .then(data => {
        orders = data;
        updateOrderList();
    })
    .catch(error => console.error('Error loading orders:', error));
</script> 